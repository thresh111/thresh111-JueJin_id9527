{
  "version": 3,
  "sources": ["../../../packages/components/col/src/col.ts", "../../../packages/components/col/src/col.vue", "../../../packages/components/col/index.ts"],
  "sourcesContent": ["import { buildProps, definePropType, mutable } from '@element-plus/utils'\nimport type { ExtractPropTypes } from 'vue'\nimport type Col from './col.vue'\n\nexport type ColSizeObject = {\n  span?: number\n  offset?: number\n  pull?: number\n  push?: number\n}\nexport type ColSize = number | ColSizeObject\n\nexport const colProps = buildProps({\n  /**\n   * @description custom element tag\n   */\n  tag: {\n    type: String,\n    default: 'div',\n  },\n  /**\n   * @description number of column the grid spans\n   */\n  span: {\n    type: Number,\n    default: 24,\n  },\n  /**\n   * @description number of spacing on the left side of the grid\n   */\n  offset: {\n    type: Number,\n    default: 0,\n  },\n  /**\n   * @description number of columns that grid moves to the left\n   */\n  pull: {\n    type: Number,\n    default: 0,\n  },\n  /**\n   * @description number of columns that grid moves to the right\n   */\n  push: {\n    type: Number,\n    default: 0,\n  },\n  /**\n   * @description `<768px` Responsive columns or column props object\n   */\n  xs: {\n    type: definePropType<ColSize>([Number, Object]),\n    default: () => mutable({} as const),\n  },\n  /**\n   * @description `≥768px` Responsive columns or column props object\n   */\n  sm: {\n    type: definePropType<ColSize>([Number, Object]),\n    default: () => mutable({} as const),\n  },\n  /**\n   * @description `≥992px` Responsive columns or column props object\n   */\n  md: {\n    type: definePropType<ColSize>([Number, Object]),\n    default: () => mutable({} as const),\n  },\n  /**\n   * @description `≥1200px` Responsive columns or column props object\n   */\n  lg: {\n    type: definePropType<ColSize>([Number, Object]),\n    default: () => mutable({} as const),\n  },\n  /**\n   * @description `≥1920px` Responsive columns or column props object\n   */\n  xl: {\n    type: definePropType<ColSize>([Number, Object]),\n    default: () => mutable({} as const),\n  },\n} as const)\nexport type ColProps = ExtractPropTypes<typeof colProps>\nexport type ColInstance = InstanceType<typeof Col>\n", "<template>\n  <component :is=\"tag\" :class=\"colKls\" :style=\"style\">\n    <slot />\n  </component>\n</template>\n\n<script setup lang=\"ts\">\nimport { computed, inject } from 'vue'\nimport { isNumber, isObject } from '@element-plus/utils'\nimport { useNamespace } from '@element-plus/hooks'\nimport { rowContextKey } from '@element-plus/tokens'\nimport { colProps } from './col'\nimport type { CSSProperties } from 'vue'\n\ndefineOptions({\n  name: 'ElCol',\n})\n\nconst props = defineProps(colProps)\n\nconst { gutter } = inject(rowContextKey, { gutter: computed(() => 0) })\nconst ns = useNamespace('col')\n\nconst style = computed(() => {\n  const styles: CSSProperties = {}\n  if (gutter.value) {\n    styles.paddingLeft = styles.paddingRight = `${gutter.value / 2}px`\n  }\n  return styles\n})\n\nconst colKls = computed(() => {\n  const classes: string[] = []\n  const pos = ['span', 'offset', 'pull', 'push'] as const\n\n  pos.forEach((prop) => {\n    const size = props[prop]\n    if (isNumber(size)) {\n      if (prop === 'span') classes.push(ns.b(`${props[prop]}`))\n      else if (size > 0) classes.push(ns.b(`${prop}-${props[prop]}`))\n    }\n  })\n\n  const sizes = ['xs', 'sm', 'md', 'lg', 'xl'] as const\n  sizes.forEach((size) => {\n    if (isNumber(props[size])) {\n      classes.push(ns.b(`${size}-${props[size]}`))\n    } else if (isObject(props[size])) {\n      Object.entries(props[size]).forEach(([prop, sizeProp]) => {\n        classes.push(\n          prop !== 'span'\n            ? ns.b(`${size}-${prop}-${sizeProp}`)\n            : ns.b(`${size}-${sizeProp}`)\n        )\n      })\n    }\n  })\n\n  // this is for the fix\n  if (gutter.value) {\n    classes.push(ns.is('guttered'))\n  }\n  return [ns.b(), classes]\n})\n</script>\n", "import { withInstall } from '@element-plus/utils'\n\nimport Col from './src/col.vue'\n\nexport const ElCol = withInstall(Col)\nexport default ElCol\n\nexport * from './src/col'\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;AACY,IAAC,WAAW,WAAW;EACjC,KAAK;IACH,MAAM;IACN,SAAS;EACb;EACE,MAAM;IACJ,MAAM;IACN,SAAS;EACb;EACE,QAAQ;IACN,MAAM;IACN,SAAS;EACb;EACE,MAAM;IACJ,MAAM;IACN,SAAS;EACb;EACE,MAAM;IACJ,MAAM;IACN,SAAS;EACb;EACE,IAAI;IACF,MAAM,eAAe,CAAC,QAAQ,MAAM,CAAC;IACrC,SAAS,MAAM,QAAQ,CAAA,CAAE;EAC7B;EACE,IAAI;IACF,MAAM,eAAe,CAAC,QAAQ,MAAM,CAAC;IACrC,SAAS,MAAM,QAAQ,CAAA,CAAE;EAC7B;EACE,IAAI;IACF,MAAM,eAAe,CAAC,QAAQ,MAAM,CAAC;IACrC,SAAS,MAAM,QAAQ,CAAA,CAAE;EAC7B;EACE,IAAI;IACF,MAAM,eAAe,CAAC,QAAQ,MAAM,CAAC;IACrC,SAAS,MAAM,QAAQ,CAAA,CAAE;EAC7B;EACE,IAAI;IACF,MAAM,eAAe,CAAC,QAAQ,MAAM,CAAC;IACrC,SAAS,MAAM,QAAQ,CAAA,CAAE;EAC7B;AACA,CAAC;;;kCC5Ba;EACZ,MAAM;AACR,CAAA;;;;;;AAIM,UAAA,EAAE,OAAW,IAAA,OAAO,eAAe,EAAE,QAAQ,SAAS,MAAM,CAAC,EAAA,CAAG;AAChE,UAAA,KAAK,aAAa,KAAK;AAEvB,UAAA,QAAQ,SAAS,MAAM;AAC3B,YAAM,SAAwB,CAAA;AAC9B,UAAI,OAAO,OAAO;AAChB,eAAO,cAAc,OAAO,eAAe,GAAG,OAAO,QAAQ;MAAA;AAExD,aAAA;IAAA,CACR;AAEK,UAAA,SAAS,SAAS,MAAM;AAC5B,YAAM,UAAoB,CAAA;AAC1B,YAAM,MAAM,CAAC,QAAQ,UAAU,QAAQ,MAAM;AAEzC,UAAA,QAAQ,CAAC,SAAS;AACpB,cAAM,OAAO,MAAM,IAAA;AACf,YAAA,SAAS,IAAI,GAAG;AAClB,cAAI,SAAS;AAAQ,oBAAQ,KAAK,GAAG,EAAE,GAAG,MAAM,IAAA,GAAO,CAAC;mBAC/C,OAAO;AAAG,oBAAQ,KAAK,GAAG,EAAE,GAAG,QAAQ,MAAM,IAAA,GAAO,CAAC;QAAA;MAChE,CACD;AAED,YAAM,QAAQ,CAAC,MAAM,MAAM,MAAM,MAAM,IAAI;AACrC,YAAA,QAAQ,CAAC,SAAS;AAClB,YAAA,SAAS,MAAM,IAAA,CAAK,GAAG;AACzB,kBAAQ,KAAK,GAAG,EAAE,GAAG,QAAQ,MAAM,IAAA,GAAO,CAAC;QAAA,WAClC,SAAS,MAAM,IAAA,CAAK,GAAG;AACzB,iBAAA,QAAQ,MAAM,IAAK,CAAA,EAAE,QAAQ,CAAC,CAAC,MAAM,QAAc,MAAA;AACxD,oBAAQ,KACN,SAAS,SACL,GAAG,EAAE,GAAG,QAAQ,QAAQ,UAAU,IAClC,GAAG,EAAE,GAAG,QAAQ,UAAU,CAChC;UAAA,CACD;QAAA;MACH,CACD;AAGD,UAAI,OAAO,OAAO;AAChB,gBAAQ,KAAK,GAAG,GAAG,UAAU,CAAC;MAAA;AAEhC,aAAO,CAAC,GAAG,EAAE,GAAG,OAAO;IAAA,CACxB;;;;;;;;;;;;;;;;;AC7DW,IAAC,QAAQ,YAAY,GAAG;",
  "names": []
}
