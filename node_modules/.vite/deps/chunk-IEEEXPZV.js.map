{
  "version": 3,
  "sources": ["../../../packages/components/button/src/use-button.ts", "../../../packages/components/button/src/button.ts", "../../../packages/components/button/src/button-custom.ts", "../../../packages/components/button/src/button.vue", "../../../packages/components/button/src/button-group.ts", "../../../packages/components/button/src/button-group.vue", "../../../packages/components/button/index.ts"],
  "sourcesContent": ["import { Text, computed, inject, ref, useSlots } from 'vue'\nimport {\n  useDeprecated,\n  useDisabled,\n  useFormItem,\n  useGlobalConfig,\n  useSize,\n} from '@element-plus/hooks'\nimport { buttonGroupContextKey } from '@element-plus/tokens'\n\nimport type { SetupContext } from 'vue'\nimport type { ButtonEmits, ButtonProps } from './button'\n\nexport const useButton = (\n  props: ButtonProps,\n  emit: SetupContext<ButtonEmits>['emit']\n) => {\n  useDeprecated(\n    {\n      from: 'type.text',\n      replacement: 'link',\n      version: '3.0.0',\n      scope: 'props',\n      ref: 'https://element-plus.org/en-US/component/button.html#button-attributes',\n    },\n    computed(() => props.type === 'text')\n  )\n\n  const buttonGroupContext = inject(buttonGroupContextKey, undefined)\n  const globalConfig = useGlobalConfig('button')\n  const { form } = useFormItem()\n  const _size = useSize(computed(() => buttonGroupContext?.size))\n  const _disabled = useDisabled()\n  const _ref = ref<HTMLButtonElement>()\n  const slots = useSlots()\n\n  const _type = computed(() => props.type || buttonGroupContext?.type || '')\n  const autoInsertSpace = computed(\n    () => props.autoInsertSpace ?? globalConfig.value?.autoInsertSpace ?? false\n  )\n\n  // add space between two characters in Chinese\n  const shouldAddSpace = computed(() => {\n    const defaultSlot = slots.default?.()\n    if (autoInsertSpace.value && defaultSlot?.length === 1) {\n      const slot = defaultSlot[0]\n      if (slot?.type === Text) {\n        const text = slot.children as string\n        return /^\\p{Unified_Ideograph}{2}$/u.test(text.trim())\n      }\n    }\n    return false\n  })\n\n  const handleClick = (evt: MouseEvent) => {\n    if (props.nativeType === 'reset') {\n      form?.resetFields()\n    }\n    emit('click', evt)\n  }\n\n  return {\n    _disabled,\n    _size,\n    _type,\n    _ref,\n    shouldAddSpace,\n    handleClick,\n  }\n}\n", "import { useSizeProp } from '@element-plus/hooks'\nimport { buildProps, iconPropType } from '@element-plus/utils'\nimport { Loading } from '@element-plus/icons-vue'\nimport type { ExtractPropTypes } from 'vue'\n\nexport const buttonTypes = [\n  'default',\n  'primary',\n  'success',\n  'warning',\n  'info',\n  'danger',\n  /**\n   * @deprecated\n   * Text type will be deprecated in the next major version (3.0.0)\n   */\n  'text',\n  '',\n] as const\nexport const buttonNativeTypes = ['button', 'submit', 'reset'] as const\n\nexport const buttonProps = buildProps({\n  /**\n   * @description button size\n   */\n  size: useSizeProp,\n  /**\n   * @description disable the button\n   */\n  disabled: Boolean,\n  /**\n   * @description button type\n   */\n  type: {\n    type: String,\n    values: buttonTypes,\n    default: '',\n  },\n  /**\n   * @description icon component\n   */\n  icon: {\n    type: iconPropType,\n  },\n  /**\n   * @description native button type\n   */\n  nativeType: {\n    type: String,\n    values: buttonNativeTypes,\n    default: 'button',\n  },\n  /**\n   * @description determine whether it's loading\n   */\n  loading: Boolean,\n  /**\n   * @description customize loading icon component\n   */\n  loadingIcon: {\n    type: iconPropType,\n    default: () => Loading,\n  },\n  /**\n   * @description determine whether it's a plain button\n   */\n  plain: Boolean,\n  /**\n   * @description determine whether it's a text button\n   */\n  text: Boolean,\n  /**\n   * @description determine whether it's a link button\n   */\n  link: Boolean,\n  /**\n   * @description determine whether the text button background color is always on\n   */\n  bg: Boolean,\n  /**\n   * @description native button autofocus\n   */\n  autofocus: Boolean,\n  /**\n   * @description determine whether it's a round button\n   */\n  round: Boolean,\n  /**\n   * @description determine whether it's a circle button\n   */\n  circle: Boolean,\n  /**\n   * @description custom button color, automatically calculate `hover` and `active` color\n   */\n  color: String,\n  /**\n   * @description dark mode, which automatically converts `color` to dark mode colors\n   */\n  dark: Boolean,\n  /**\n   * @description automatically insert a space between two chinese characters\n   */\n  autoInsertSpace: {\n    type: Boolean,\n    default: undefined,\n  },\n} as const)\nexport const buttonEmits = {\n  click: (evt: MouseEvent) => evt instanceof MouseEvent,\n}\n\nexport type ButtonProps = ExtractPropTypes<typeof buttonProps>\nexport type ButtonEmits = typeof buttonEmits\n\nexport type ButtonType = ButtonProps['type']\nexport type ButtonNativeType = ButtonProps['nativeType']\n\nexport interface ButtonConfigContext {\n  autoInsertSpace?: boolean\n}\n", "import { computed } from 'vue'\nimport { TinyColor } from '@ctrl/tinycolor'\nimport { useDisabled, useNamespace } from '@element-plus/hooks'\nimport type { ButtonProps } from './button'\n\nexport function darken(color: TinyColor, amount = 20) {\n  return color.mix('#141414', amount).toString()\n}\n\nexport function useButtonCustomStyle(props: ButtonProps) {\n  const _disabled = useDisabled()\n  const ns = useNamespace('button')\n\n  // calculate hover & active color by custom color\n  // only work when custom color\n  return computed(() => {\n    let styles: Record<string, string> = {}\n\n    const buttonColor = props.color\n\n    if (buttonColor) {\n      const color = new TinyColor(buttonColor)\n      const activeBgColor = props.dark\n        ? color.tint(20).toString()\n        : darken(color, 20)\n\n      if (props.plain) {\n        styles = ns.cssVarBlock({\n          'bg-color': props.dark\n            ? darken(color, 90)\n            : color.tint(90).toString(),\n          'text-color': buttonColor,\n          'border-color': props.dark\n            ? darken(color, 50)\n            : color.tint(50).toString(),\n          'hover-text-color': `var(${ns.cssVarName('color-white')})`,\n          'hover-bg-color': buttonColor,\n          'hover-border-color': buttonColor,\n          'active-bg-color': activeBgColor,\n          'active-text-color': `var(${ns.cssVarName('color-white')})`,\n          'active-border-color': activeBgColor,\n        })\n\n        if (_disabled.value) {\n          styles[ns.cssVarBlockName('disabled-bg-color')] = props.dark\n            ? darken(color, 90)\n            : color.tint(90).toString()\n          styles[ns.cssVarBlockName('disabled-text-color')] = props.dark\n            ? darken(color, 50)\n            : color.tint(50).toString()\n          styles[ns.cssVarBlockName('disabled-border-color')] = props.dark\n            ? darken(color, 80)\n            : color.tint(80).toString()\n        }\n      } else {\n        const hoverBgColor = props.dark\n          ? darken(color, 30)\n          : color.tint(30).toString()\n        const textColor = color.isDark()\n          ? `var(${ns.cssVarName('color-white')})`\n          : `var(${ns.cssVarName('color-black')})`\n        styles = ns.cssVarBlock({\n          'bg-color': buttonColor,\n          'text-color': textColor,\n          'border-color': buttonColor,\n          'hover-bg-color': hoverBgColor,\n          'hover-text-color': textColor,\n          'hover-border-color': hoverBgColor,\n          'active-bg-color': activeBgColor,\n          'active-border-color': activeBgColor,\n        })\n\n        if (_disabled.value) {\n          const disabledButtonColor = props.dark\n            ? darken(color, 50)\n            : color.tint(50).toString()\n          styles[ns.cssVarBlockName('disabled-bg-color')] = disabledButtonColor\n          styles[ns.cssVarBlockName('disabled-text-color')] = props.dark\n            ? 'rgba(255, 255, 255, 0.5)'\n            : `var(${ns.cssVarName('color-white')})`\n          styles[ns.cssVarBlockName('disabled-border-color')] =\n            disabledButtonColor\n        }\n      }\n    }\n\n    return styles\n  })\n}\n", "<template>\n  <button\n    ref=\"_ref\"\n    :class=\"[\n      ns.b(),\n      ns.m(_type),\n      ns.m(_size),\n      ns.is('disabled', _disabled),\n      ns.is('loading', loading),\n      ns.is('plain', plain),\n      ns.is('round', round),\n      ns.is('circle', circle),\n      ns.is('text', text),\n      ns.is('link', link),\n      ns.is('has-bg', bg),\n    ]\"\n    :aria-disabled=\"_disabled || loading\"\n    :disabled=\"_disabled || loading\"\n    :autofocus=\"autofocus\"\n    :type=\"nativeType\"\n    :style=\"buttonStyle\"\n    @click=\"handleClick\"\n  >\n    <template v-if=\"loading\">\n      <slot v-if=\"$slots.loading\" name=\"loading\" />\n      <el-icon v-else :class=\"ns.is('loading')\">\n        <component :is=\"loadingIcon\" />\n      </el-icon>\n    </template>\n    <el-icon v-else-if=\"icon || $slots.icon\">\n      <component :is=\"icon\" v-if=\"icon\" />\n      <slot v-else name=\"icon\" />\n    </el-icon>\n    <span\n      v-if=\"$slots.default\"\n      :class=\"{ [ns.em('text', 'expand')]: shouldAddSpace }\"\n    >\n      <slot />\n    </span>\n  </button>\n</template>\n\n<script lang=\"ts\" setup>\nimport { ElIcon } from '@element-plus/components/icon'\nimport { useNamespace } from '@element-plus/hooks'\nimport { useButton } from './use-button'\nimport { buttonEmits, buttonProps } from './button'\nimport { useButtonCustomStyle } from './button-custom'\n\ndefineOptions({\n  name: 'ElButton',\n})\n\nconst props = defineProps(buttonProps)\nconst emit = defineEmits(buttonEmits)\n\nconst buttonStyle = useButtonCustomStyle(props)\nconst ns = useNamespace('button')\nconst { _ref, _size, _type, _disabled, shouldAddSpace, handleClick } =\n  useButton(props, emit)\n\ndefineExpose({\n  /** @description button html element */\n  ref: _ref,\n  /** @description button size */\n  size: _size,\n  /** @description button type */\n  type: _type,\n  /** @description button disabled */\n  disabled: _disabled,\n  /** @description whether adding space */\n  shouldAddSpace,\n})\n</script>\n", "import { buttonProps } from './button'\n\nimport type { ExtractPropTypes } from 'vue'\n\nexport const buttonGroupProps = {\n  /**\n   * @description control the size of buttons in this button-group\n   */\n  size: buttonProps.size,\n  /**\n   * @description control the type of buttons in this button-group\n   */\n  type: buttonProps.type,\n} as const\nexport type ButtonGroupProps = ExtractPropTypes<typeof buttonGroupProps>\n", "<template>\n  <div :class=\"`${ns.b('group')}`\">\n    <slot />\n  </div>\n</template>\n<script lang=\"ts\" setup>\nimport { provide, reactive, toRef } from 'vue'\nimport { buttonGroupContextKey } from '@element-plus/tokens'\nimport { useNamespace } from '@element-plus/hooks'\nimport { buttonGroupProps } from './button-group'\n\ndefineOptions({\n  name: 'ElButtonGroup',\n})\nconst props = defineProps(buttonGroupProps)\nprovide(\n  buttonGroupContextKey,\n  reactive({\n    size: toRef(props, 'size'),\n    type: toRef(props, 'type'),\n  })\n)\nconst ns = useNamespace('button')\n</script>\n", "import { withInstall, withNoopInstall } from '@element-plus/utils'\nimport Button from './src/button.vue'\nimport ButtonGroup from './src/button-group.vue'\n\nexport const ElButton = withInstall(Button, {\n  ButtonGroup,\n})\nexport const ElButtonGroup = withNoopInstall(ButtonGroup)\nexport default ElButton\n\nexport * from './src/button'\nexport type { ButtonInstance, ButtonGroupInstance } from './src/instance'\n"],
  "mappings": "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",
  "names": []
}
